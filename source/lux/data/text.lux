##   Copyright (c) Eduardo Julian. All rights reserved.
##   The use and distribution terms for this software are covered by the
##   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
##   which can be found in the file epl-v10.html at the root of this distribution.
##   By using this software in any fashion, you are agreeing to be bound by
##   the terms of this license.
##   You must not remove this notice, or any other, from this software.

(;import lux
         (lux (meta macro)
              (control (monoid #as m)
                       (eq #as E)
                       (ord #as O)
                       (show #as S)
                       (monad #as M #refer #all))
              (data (number (int #open ("i" Int/Number Int/Ord Int/Eq)))
                    maybe
                    (list #refer (#only foldL list list&)))))

## [Functions]
(def #export (size x)
  (-> Text Int)
  (_jvm_i2l (_jvm_invokevirtual "java.lang.String" "length" []
                                x [])))

(def #export (@ idx x)
  (-> Int Text (Maybe Char))
  (if (and (i< idx (size x))
           (i>= idx 0))
    (#;Some (_jvm_invokevirtual "java.lang.String" "charAt" ["int"]
                                x [(_jvm_l2i idx)]))
    #;None))

(def #export (contains? x y)
  (-> Text Text Bool)
  (_jvm_invokevirtual "java.lang.String" "contains" ["java.lang.CharSequence"]
                      x [y]))

(do-template [<name> <method>]
  [(def #export (<name> x)
     (-> Text Text)
     (_jvm_invokevirtual "java.lang.String" <method> []
                         x []))]
  [lower-case "toLowerCase"]
  [upper-case "toUpperCase"]
  [trim       "trim"]
  )

(def #export (sub' from to x)
  (-> Int Int Text (Maybe Text))
  (if (and (i< from to)
           (i>= from 0)
           (i<= to (size x)))
    (#;Some (_jvm_invokevirtual "java.lang.String" "substring" ["int" "int"]
                                x [(_jvm_l2i from) (_jvm_l2i to)]))
    #;None))

(def #export (sub from x)
  (-> Int Text (Maybe Text))
  (sub' from (size x) x))

(def #export (split at x)
  (-> Int Text (Maybe (, Text Text)))
  (if (and (i< at (size x))
           (i>= at 0))
    (let [pre (_jvm_invokevirtual "java.lang.String" "substring" ["int" "int"]
                                  x [(_jvm_l2i 0) (_jvm_l2i at)])
          post (_jvm_invokevirtual "java.lang.String" "substring" ["int"]
                                   x [(_jvm_l2i at)])]
      (#;Some [pre post]))
    #;None))

(def #export (replace pattern value template)
  (-> Text Text Text Text)
  (_jvm_invokevirtual "java.lang.String" "replace" ["java.lang.CharSequence" "java.lang.CharSequence"]
                      template [pattern value]))

(do-template [<common> <general> <method>]
  [(def #export (<general> pattern from x)
     (-> Text Int Text (Maybe Int))
     (if (and (i< from (size x)) (i>= from 0))
       (case (_jvm_i2l (_jvm_invokevirtual "java.lang.String" <method> ["java.lang.String" "int"]
                                           x [pattern (_jvm_l2i from)]))
         -1  #;None
         idx (#;Some idx))
       #;None))
   
   (def #export (<common> pattern x)
     (-> Text Text (Maybe Int))
     (case (_jvm_i2l (_jvm_invokevirtual "java.lang.String" <method> ["java.lang.String"]
                                         x [pattern]))
       -1  #;None
       idx (#;Some idx)))]

  [index-of      index-of'      "indexOf"]
  [last-index-of last-index-of' "lastIndexOf"]
  )

(def #export (starts-with? prefix x)
  (-> Text Text Bool)
  (case (index-of prefix x)
    (#;Some 0)
    true

    _
    false))

(def #export (ends-with? postfix x)
  (-> Text Text Bool)
  (case (last-index-of postfix x)
    (#;Some n)
    (i= (i+ n (size postfix))
        (size x))

    _
    false))

## [Structures]
(defstruct #export Text/Eq (E;Eq Text)
  (def (E;= x y)
    (_jvm_invokevirtual "java.lang.Object" "equals" ["java.lang.Object"]
                        x [y])))

(defstruct #export Text/Ord (O;Ord Text)
  (def O;_eq Text/Eq)

  (do-template [<name> <op>]
    [(def (<name> x y)
       (<op> (_jvm_i2l (_jvm_invokevirtual "java.lang.String" "compareTo" ["java.lang.String"]
                                           x [y]))
             0))]

    [O;<  i<]
    [O;<= i<=]
    [O;>  i>]
    [O;>= i>=]))

(defstruct #export Text/Show (S;Show Text)
  (def S;show id))

(defstruct #export Text/Monoid (m;Monoid Text)
  (def m;unit "")
  (def (m;++ x y)
    (_jvm_invokevirtual "java.lang.String" "concat" ["java.lang.String"]
                        x [y])))

## [Syntax]
(def (extract-var template)
  (-> Text (Maybe (, Text Text Text)))
  (exec (_jvm_invokevirtual "java.io.PrintStream" "println" ["java.lang.Object"]
                            (_jvm_getstatic "java.lang.System" "out") [(:: Text/Monoid (m;++ "Template: " template))])
    (do Maybe/Monad
      [pre-idx (index-of "#{" template)
       [pre in] (split pre-idx template)
       [_ in] (split 2 in)
       post-idx (index-of "}" in)
       [var post] (split post-idx in)
       [_ post] (split 1 post)]
      (M;wrap [pre var post]))))

(def (unravel-template template)
  (-> Text (List Syntax))
  (case (extract-var template)
    (#;Some [pre var post])
    (list& (text$ pre) (symbol$ ["" var])
           (unravel-template post))

    #;None
    (list (text$ template))))

(defmacro #export (<> tokens state)
  (case tokens
    (\ (list (#;Meta _ (#;TextS template))))
    (let [++ (symbol$ ["" ""])]
      (#;Right state (list (` (;let [(~ ++) (;:: Text/Monoid m;++)]
                                    (;$ (~ ++) (~@ (unravel-template template))))))))

    _
    (#;Left "Wrong syntax for <>")))
