##   Copyright (c) Eduardo Julian. All rights reserved.
##   The use and distribution terms for this software are covered by the
##   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
##   which can be found in the file epl-v10.html at the root of this distribution.
##   By using this software in any fashion, you are agreeing to be bound by
##   the terms of this license.
##   You must not remove this notice, or any other, from this software.

(;import lux
         (lux/control (number #as N)
                      (monoid #as m)
                      (eq #as E)
                      (ord #as O)
                      (bounded #as B)
                      (show #as S)))

## [Structures]
## Number
(do-template [<name> <type> <+> <-> <*> </> <%> <=> <<> <from> <0> <1> <-1>]
  [(defstruct #export <name> (N;Number <type>)
     (def (+ x y) (<+> x y))
     (def (- x y) (<-> x y))
     (def (* x y) (<*> x y))
     (def (/ x y) (</> x y))
     (def (% x y) (<%> x y))
     (def (from-int x)
       (<from> x))
     (def (negate x)
       (<*> <-1> x))
     (def (abs x)
       (if (<<> x <0>)
         (<*> <-1> x)
         x))
     (def (signum x)
       (cond (<=> x <0>) <0>
             (<<> x <0>) <-1>
             ## else
             <1>))
     )]

  [Real/Number Real _jvm_dadd _jvm_dsub _jvm_dmul _jvm_ddiv _jvm_drem _jvm_deq _jvm_dlt _jvm_l2d 0.0 1.0 -1.0])

## Eq
(defstruct #export Real/Eq (E;Eq Real)
  (def (= x y) (_jvm_deq x y)))

## Ord
(do-template [<name> <type> <eq> <=> <lt> <gt>]
  [(defstruct #export <name> (O;Ord <type>)
     (def _eq <eq>)
     (def (< x y) (<lt> x y))
     (def (<= x y)
       (or (<lt> x y)
           (<=> x y)))
     (def (> x y) (<gt> x y))
     (def (>= x y)
       (or (<gt> x y)
           (<=> x y))))]

  [Real/Ord Real Real/Eq _jvm_deq _jvm_dlt _jvm_dgt])

## Bounded
(do-template [<name> <type> <top> <bottom>]
  [(defstruct #export <name> (B;Bounded <type>)
     (def top <top>)
     (def bottom <bottom>))]

  [Real/Bounded Real (_jvm_getstatic "java.lang.Double" "MAX_VALUE") (_jvm_getstatic "java.lang.Double" "MIN_VALUE")])

## Monoid
(do-template [<name> <type> <unit> <++>]
  [(defstruct #export <name> (m;Monoid <type>)
     (def unit <unit>)
     (def (++ x y) (<++> x y)))]

  [RealAdd/Monoid Real 0.0 _jvm_dadd]
  [RealMul/Monoid Real 1.0 _jvm_dmul]
  [RealMax/Monoid Real (:: Real/Bounded B;bottom)  (O;max Real/Ord)]
  [RealMin/Monoid Real (:: Real/Bounded B;top)     (O;min Real/Ord)]
  )

## Show
(do-template [<name> <type> <body>]
  [(defstruct #export <name> (S;Show <type>)
     (def (show x)
       <body>))]

  [Real/Show Real (_jvm_invokevirtual "java.lang.Object" "toString" [] x [])]
  )
