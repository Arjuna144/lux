##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (lux/control (number #as N)
                      (monoid #as m)
                      (eq #as E)
                      (ord #as O)
                      (bounded #as B)
                      (show #as S)))

## [Structures]
## Number
(do-template [<name> <type> <+> <-> <*> </> <%> <=> <<> <from> <0> <1> <-1>]
  [(defstruct #export <name> (N;Number <type>)
     (def (N;+ x y) (<+> x y))
     (def (N;- x y) (<-> x y))
     (def (N;* x y) (<*> x y))
     (def (N;/ x y) (</> x y))
     (def (N;% x y) (<%> x y))
     (def (N;from-int x)
       (<from> x))
     (def (N;negate x)
       (<*> <-1> x))
     (def (N;abs x)
       (if (<<> x <0>)
         (<*> <-1> x)
         x))
     (def (N;signum x)
       (cond (<=> x <0>) <0>
             (<<> x <0>) <-1>
             ## else
             <1>))
     )]

  [ Int/Number  Int _jvm_ladd _jvm_lsub _jvm_lmul _jvm_ldiv _jvm_lrem _jvm_leq _jvm_llt id 0   1   -1])

## Eq
(defstruct #export Int/Eq (E;Eq Int)
  (def (E;= x y) (_jvm_leq x y)))

## Ord
(do-template [<name> <type> <eq> <=> <lt> <gt>]
  [(defstruct #export <name> (O;Ord <type>)
     (def O;_eq <eq>)
     (def (O;< x y) (<lt> x y))
     (def (O;<= x y)
       (or (<lt> x y)
           (<=> x y)))
     (def (O;> x y) (<gt> x y))
     (def (O;>= x y)
       (or (<gt> x y)
           (<=> x y))))]

  [ Int/Ord  Int  Int/Eq _jvm_leq _jvm_llt _jvm_lgt])

## Bounded
(do-template [<name> <type> <top> <bottom>]
  [(defstruct #export <name> (B;Bounded <type>)
     (def B;top <top>)
     (def B;bottom <bottom>))]

  [ Int/Bounded  Int (_jvm_getstatic "java.lang.Long"   "MAX_VALUE") (_jvm_getstatic "java.lang.Long"   "MIN_VALUE")])

## Monoid
(do-template [<name> <type> <unit> <++>]
  [(defstruct #export <name> (m;Monoid <type>)
     (def m;unit <unit>)
     (def (m;++ x y) (<++> x y)))]

  [ IntAdd/Monoid  Int 0 _jvm_ladd]
  [ IntMul/Monoid  Int 1 _jvm_lmul]
  [ IntMax/Monoid  Int (::  Int/Bounded B;bottom)  (O;max  Int/Ord)]
  [ IntMin/Monoid  Int (::  Int/Bounded B;top)     (O;min  Int/Ord)]
  )

## Show
(do-template [<name> <type> <body>]
  [(defstruct #export <name> (S;Show <type>)
     (def (S;show x)
       <body>))]

  [ Int/Show  Int (_jvm_invokevirtual "java.lang.Object" "toString" [] x [])]
  )
