##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (.. (functor #as F)
             (monoid #as M))
         (lux/meta macro
                   ast))

## [Utils]
(def (foldL f init xs)
  (All [a b]
    (-> (-> a b a) a (List b) a)) 
  (case xs
    #;Nil
    init

    (#;Cons [x xs'])
    (foldL f (f init x) xs')))

(def (reverse xs)
  (All [a]
    (-> (List a) (List a)))
  (foldL (lambda [tail head] (#;Cons [head tail]))
         #;Nil
         xs))

(def (as-pairs xs)
  (All [a] (-> (List a) (List (, a a))))
  (case xs
    (#;Cons [x1 (#;Cons [x2 xs'])])
    (#;Cons [[x1 x2] (as-pairs xs')])

    _
    #;Nil))

## [Signatures]
(defsig #export (Monad m)
  (: (F;Functor m)
     _functor)
  (: (All [a]
       (-> a (m a)))
     wrap)
  (: (All [a]
       (-> (m (m a)) (m a)))
     join))

## [Syntax]
(defmacro #export (do tokens state)
  (case tokens
    ## (\ (list monad [_ (#;TupleS bindings)] body))
    (#;Cons [monad (#;Cons [[_ (#;TupleS bindings)] (#;Cons [body #;Nil])])])
    (let [g!map (symbol$ ["" " map "])
          g!join (symbol$ ["" " join "])
          body' (foldL (: (-> AST (, AST AST) AST)
                          (lambda [body' binding]
                            (let [[var value] binding]
                              (case var
                                [_ (#;TagS ["" "let"])]
                                (` (;let (~ value) (~ body')))

                                _
                                (` (;|> (~ value) ((~ g!map) (;lambda [(~ var)] (~ body'))) (~ g!join)))
                                ## (` (;|> (~ value) (F;map (;lambda [(~ var)] (~ body'))) (;:: ;;_functor) (;;join)))
                                ))))
                       body
                       (reverse (as-pairs bindings)))]
      (#;Right [state (#;Cons [(` (;case (~ monad)
                                         {#;;_functor {#F;map (~ g!map)} #;;wrap (~ (' wrap)) #;;join (~ g!join)}
                                         (~ body')))
                               #;Nil])]))

    _
    (#;Left "Wrong syntax for do")))

## [Functions]
(def #export (bind m f ma)
  (All [m a b]
    (-> (Monad m) (-> a (m b)) (m a) (m b)))
  (using m
    (join (map f ma))))

(def #export (map% m f xs)
  (All [m a b]
    (-> (Monad m) (-> a (m b)) (List a) (m (List b))))
  (case xs
    #;Nil
    (:: m (;;wrap #;Nil))
    
    (#;Cons [x xs'])
    (do m
      [y (f x)
       ys (map% m f xs')]
      (wrap (#;Cons [y ys])))
    ))
