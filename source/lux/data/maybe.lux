##   Copyright (c) Eduardo Julian. All rights reserved.
##   The use and distribution terms for this software are covered by the
##   Eclipse Public License 1.0 (http://opensource.org/licenses/eclipse-1.0.php)
##   which can be found in the file epl-v10.html at the root of this distribution.
##   By using this software in any fashion, you are agreeing to be bound by
##   the terms of this license.
##   You must not remove this notice, or any other, from this software.

(;import lux
         (lux (meta macro
                    ast)
              (control (monoid #as m #refer #all)
                       (functor #as F #refer #all)
                       (monad #as M #refer #all)))
         (.. list))

## [Types]
## (deftype (Maybe a)
##   (| #;None
##      (#;Some a)))

## [Structures]
(defstruct #export Maybe/Monoid (Monoid Maybe)
  (def unit #;None)
  (def (++ xs ys)
    (case xs
      #;None     ys
      (#;Some x) (#;Some x))))

(defstruct #export Maybe/Functor (Functor Maybe)
  (def (map f ma)
    (case ma
      #;None     #;None
      (#;Some a) (#;Some (f a)))))

(defstruct #export Maybe/Monad (Monad Maybe)
  (def _functor Maybe/Functor)

  (def (wrap x)
    (#;Some x))

  (def (join mma)
    (case mma
      #;None      #;None
      (#;Some xs) xs)))

## [Syntax]
(defmacro #export (? tokens state)
  (case tokens
    (\ (list maybe else))
    (let [g!value (symbol$ ["" "_"])]
      (#;Right state (list (` (case (~ maybe)
                                (#;Some (~ g!value))
                                (~ g!value)

                                _
                                (~ else))))))
    
    _
    (#;Left "Wrong syntax for ?")))
