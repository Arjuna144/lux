##  Copyright (c) Eduardo Julian. All rights reserved.
##  This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
##  If a copy of the MPL was not distributed with this file,
##  You can obtain one at http://mozilla.org/MPL/2.0/.

(;import lux
         (../functor #as F)
         lux/data/list
         lux/meta/macro)

## [Signatures]
(defsig #export (CoMonad w)
  (: (F;Functor w)
     _functor)
  (: (All [a]
       (-> (w a) a))
     unwrap)
  (: (All [a]
       (-> (w a) (w (w a))))
     split))

## [Functions]
(def #export (extend w f ma)
  (All [w a b]
    (-> (CoMonad w) (-> (w a) b) (w a) (w b)))
  (using w
    (map f (split ma))))

## [Syntax]
(defmacro #export (be tokens state)
  (case tokens
    (\ (list monad (#;Meta [_ (#;TupleS bindings)]) body))
    (let [body' (foldL (: (-> AST (, AST AST) AST)
                          (lambda [body' binding]
                            (let [[var value] binding]
                              (case var
                                (#;Meta [_ (#;TagS ["" "let"])])
                                (` (;let (~ value) (~ body')))

                                _
                                (` (extend (;lambda [(~ var)] (~ body'))
                                           (~ value)))))))
                       body
                       (reverse (as-pairs bindings)))]
      (#;Right [state (list (` (;case (~ monad)
                                      {#;return ;return #;bind ;bind}
                                      (~ body'))))]))

    _
    (#;Left "Wrong syntax for be")))
